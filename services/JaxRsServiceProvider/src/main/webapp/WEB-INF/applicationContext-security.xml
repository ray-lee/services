<!--
    Document   : applicationContext-security.xml
    Created on :
    Author     :
    Copyright 2010 University of California at Berkeley
    Description:
        spring security namespace for CS service layer
        ref: http://blog.springsource.com/2010/03/06/behind-the-spring-security-namespace/

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Load Java configuration. -->
    <context:annotation-config />
    <context:component-scan base-package="org.collectionspace.services.common.storage.spring,org.collectionspace.authentication.spring" />

    <bean class="org.collectionspace.authentication.CSpaceAuthenticationSuccessEvent" />

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <!-- Read properties from security.properties file in the classpath. -->
        <!-- Values in the file override the defaults set below. -->
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations" value="classpath:security.properties" />

        <!-- Default property values. -->
        <property name="properties">
            <props>
                <prop key="cors.allowed.origins"></prop>
            </props>
        </property>
    </bean>

    <!-- Convert string properties to complex types. -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean" />

    <sec:authentication-manager id="userAuthenticationManager">
        <sec:authentication-provider ref="daoAuthenticationProvider"/>
    </sec:authentication-manager>

    <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="userDetailsService" />
        <property name="passwordEncoder">
            <bean class="org.collectionspace.authentication.spring.CSpacePasswordEncoderFactory" factory-method="createDefaultPasswordEncoder" />
        </property>
    </bean>

    <bean id="userDetailsService" class="org.collectionspace.authentication.spring.CSpaceUserDetailsService">
        <constructor-arg>
            <bean class="org.collectionspace.authentication.realm.db.CSpaceDbRealm">
                <constructor-arg>
                    <util:map>
                        <entry key="dsJndiName" value="CspaceDS" />
                        <entry key="principalsQuery" value="select passwd from users where username=?" />
                        <entry key="saltQuery" value="select salt from users where username=?" />
                        <entry key="rolesQuery" value="select r.rolename from roles as r, accounts_roles as ar where ar.user_id=? and ar.role_id=r.csid" />
                        <entry key="tenantsQueryWithDisabled" value="select t.id, t.name from accounts_common as a, accounts_tenants as at, tenants as t where a.userid=? and a.csid = at.TENANTS_ACCOUNTS_COMMON_CSID and at.tenant_id = t.id order by t.id" />
                        <entry key="tenantsQueryNoDisabled" value="select t.id, t.name from accounts_common as a, accounts_tenants as at, tenants as t where a.userid=? and a.csid = at.TENANTS_ACCOUNTS_COMMON_CSID and at.tenant_id = t.id and NOT t.disabled order by t.id" />
                        <entry key="maxRetrySeconds" value="5000" />
                        <entry key="delayBetweenAttemptsMillis" value="200" />
                    </util:map>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Switch on AOP (AspectJ) load-time weaving. -->
    <context:load-time-weaver/>
</beans>
