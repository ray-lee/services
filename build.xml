<project name="services-trunk" default="package" basedir=".">
	<description>Collectionspace Services</description>
	<!-- environment should be declared before reading build.properties -->
	<property environment="env" />
	<!-- set global properties for this build -->
	<property file="build.properties" />
	<property name="mvn.opts" value="-V" />
	<property name="src" location="src" />

	<condition property="osfamily-unix">
		<os family="unix" />
	</condition>
	<condition property="osfamily-windows">
		<os family="windows" />
	</condition>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
	</target>

	<target name="dist" depends="package" description="generate cspace service distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${basedir}/dist" />

		<!-- copy db scripts, etc. -->
		<copy todir="${basedir}/${dist.server.cspace}/cspace/services">
			<fileset dir="${src}/main/resources/scripts" />
		</copy>

		<!-- copy datasources -->
		<copy todir="${basedir}/${dist.deploy.cspace}">
			<fileset dir="${src}/main/resources/config/${db}" />
		</copy>
		<ant antfile="3rdparty/build.xml" target="dist" inheritAll="false" />
		<ant antfile="services/build.xml" target="dist" inheritAll="false" />

		<!-- bundle up everything -->
		<tar destfile="${basedir}/dist/${cspace.services.release}-${jee.release}.tar.gz" compression="gzip">
			<tarfileset dir="${basedir}/dist/cspace" preserveLeadingSlashes="true">
			</tarfileset>
		</tar>
	</target>

	<target name="dist-jee-domains" depends="init" description="create JEE distributions for cspace and nuxeo">
		<antcall target="dist-jee-cspace" />
		<antcall target="dist-jee-nuxeo" />
	</target>

	<target name="dist-jee-cspace" depends="dist" description="generate JEE distribution for cspace">
		<fail message="JEE container is not installed or ${jee.dir} not found">
			<condition>
				<not>
					<available file="${jee.dir}" type="dir" />
				</not>
			</condition>
		</fail>

		<fail message="CSpace is not deployed or ${jee.deploy.cspace.services} not found">
			<condition>
				<not>
					<available file="${jee.deploy.cspace.services}" type="file" />
				</not>
			</condition>
		</fail>

		<tar destfile="${basedir}/dist/${jee.release}-${domain.cspace}-${release.version}.tar.gz" compression="gzip">
			<tarfileset dir="${jee.dir}" prefix="${jee.release}" preserveLeadingSlashes="true">
				<exclude name="server/${jee.domain.nuxeo}/**" />
				<exclude name="server/${jee.domain.cspace}/log/**" />
				<exclude name="server/${jee.domain.cspace}/tmp/**" />
			</tarfileset>
		</tar>
	</target>

	<target name="dist-jee-nuxeo" depends="dist" description="generate nuxeo domain distribution">
		<fail message="JEE server is not installed or ${jee.dir} not found">
			<condition>
				<not>
					<available file="${jee.dir}" type="dir" />
				</not>
			</condition>
		</fail>

		<fail message="Nuxeo is not deployed or ${jee.deploy.nuxeo.plugins} not found">
			<condition>
				<not>
					<available file="${jee.deploy.nuxeo.plugins}" type="dir" />
				</not>
			</condition>
		</fail>

		<tar destfile="${basedir}/dist/${jee.release}-${domain.nuxeo}-${release.version}.tar.gz" compression="gzip">
			<tarfileset dir="${jee.dir}" prefix="${jee.release}" preserveLeadingSlashes="true">
				<exclude name="server/${jee.domain.cspace}/**" />
				<exclude name="server/${jee.domain.nuxeo}/log/**" />
				<exclude name="server/${jee.domain.nuxeo}/tmp/**" />
			</tarfileset>
		</tar>
	</target>

	<target name="package" depends="package-unix,package-windows" description="mvn package" />
	<target name="package-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="package" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="package-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="package" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="install" depends="install-unix,install-windows" description="mvn install" />
	<target name="install-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="install" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="install-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="install" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="clean" depends="clean-unix,clean-windows" description="Delete target directories">
		<delete dir="${basedir}/build" />
		<delete dir="${basedir}/dist" />
	</target>
	<target name="clean-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="clean" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="clean-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="clean" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="test" depends="test-unix,test-windows" description="Run tests" />
	<target name="test-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="test" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="test-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="test" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="doc" description="Build Java API docs">
		<ant antfile="services/build.xml" target="doc" inheritAll="false" />
	</target>

	<target name="gen_ddl" description="generate service-specific tables(s), indices, etc.">
		<ant antfile="services/build.xml" target="gen_ddl" inheritAll="false" />
	</target>

	<!--
		Top-level target to create (or recreate) CollectionSpace related databases.  Checks the 
		'recreate_db' property or environment variable.
	-->
	<target name="create_db" depends="-create_db, -create_db_erase, -create_db_warn"
		description="Creates or recreates CollectionSpace database(s), invoke subtasks for indexes, etc.">
	</target>
	
	<!--
		This target sets the Ant property 'create_db.recreate' based on the value of the Ant environment variable 'recreate_db'
		and the command line property 'recreate_db'.  A command line value of 'true' for the 'recreate_db' property will override
		the environment variable 'recreate_db' value.
		
		If the environment variable 'recreate_db' is set to true then the Ant property 'create_db.recreate' will get set to true; otherwise,
		it will get set to the current value of the Ant property 'recreate_db' -which will be null if not set on the command line.
	-->
	<target name="-create_db">
		<property environment="env"/>
		<condition property="create_db.recreate" else="${recreate_db}" value="true">
			<equals arg1="${env.recreate_db}" arg2="true"/>
		</condition>
	</target>	

	<!--
		This target sends the 'create_nuxeo_db' and 'create_nuxeo_db' targets to all the Ant sub-modules/directories
	-->
	<target name="-create_db_erase" if="${create_db.recreate}" depends="create_db-unix, create_db-windows">
		<antcall target="create_nuxeo_db" />
		<antcall target="create_cspace_db" />
	</target>
	
	<!--
		Outputs a warning to the user that existing CollectionSpace databases will be replaced/overridden.
	-->
	<target name="-create_db_warn" unless="${create_db.recreate}">
		<echo message="*** WARNING!  This target will delete any and all existing CollectionSpace databases."/>
		<echo message="*** WARNING!  You must set the Ant recreate_db property to 'true' to invoke this target."/>
		<echo message="*** WARNING!  For example,"/>
		<echo message="*** WARNING!"/>
		<echo message="*** WARNING!      'ant create_db -Drecreate_db=true'."/>
		<echo message="*** WARNING!"/>
		<echo message="*** WARNING!  Optionally, you can set an environment variable named recreate_db=true as well."/>
		<fail message="*** ERROR - Ant property 'recreate_db' was not set to 'true'. See warning messages above."/>
	</target>	

	<target name="create_db-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="validate" /> <!-- Ensure proper env vars are set -->
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	
	<target name="create_db-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="validate" /> <!-- Ensure proper env vars are set -->
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	

	<target name="create_nuxeo_db" description="create nuxeo database">
		<sql driver="${db.jdbc.driver.class}" url="${db.jdbc.csadmin.url}" userid="${db.csadmin.user}" password="${db.csadmin.user.password}" autocommit="true" src="${db.script.dir}/init_nuxeo_db.sql">
			<classpath>
				<pathelement path="${db.driver.jar}" />
			</classpath>
		</sql>
		<ant antfile="services/build.xml" target="create_nuxeo_db" inheritAll="false" />
	</target>

	<target name="create_cspace_db" description="create cspace database">
		<sql driver="${db.jdbc.driver.class}" url="${db.jdbc.csadmin.url}" userid="${db.csadmin.user}" password="${db.csadmin.user.password}" autocommit="true" src="${db.script.dir}/init_cspace_db.sql">
			<classpath>
				<pathelement path="${db.driver.jar}" />
			</classpath>
		</sql>
		<ant antfile="services/build.xml" target="create_cspace_db" inheritAll="false" />
	</target>

	<target name="import" description="import default configuration">
		<ant antfile="services/build.xml" target="import" inheritAll="false" />
	</target>

	<target name="deploy" depends="install, setup_initdb.sql" description="deploy services in ${jee.server.cspace}">
		<!-- copy db scripts, etc. -->
		<copy todir="${jee.server.cspace}/cspace/services/scripts">
			<fileset dir="${src}/main/resources/scripts/" />
		</copy>
		<ant antfile="3rdparty/build.xml" target="deploy" inheritAll="false" />
		<ant antfile="services/build.xml" target="deploy" inheritAll="false" />
	</target>

	<target name="setup_initdb.sql" description="copy init_db scripts, replacing keywords">
		<copy todir="${jee.server.cspace}/cspace/services/db">
			<fileset dir="${src}/main/resources/db" />
			<filterset>
				<filter token="DB_CSADMIN_NAME" value="${db.csadmin.name}" />
				<filter token="DB_CSADMIN_USER" value="${db.csadmin.user}" />
				<filter token="DB_CSADMIN_PASSWORD" value="${env.DB_CSADMIN_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_CSPACE_NAME" value="${db.cspace.name}" />
				<filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
				<filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_NUXEO_NAME" value="${db.nuxeo.name}" />
				<filter token="DB_NUXEO_USER" value="${db.nuxeo.user}" />
				<filter token="DB_NUXEO_PASSWORD" value="${env.DB_NUXEO_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_READER_USER" value="${db.reader.user}" />
				<filter token="DB_READER_PASSWORD" value="${env.DB_READER_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->
			</filterset>
		</copy>
	</target>

	<target name="undeploy" description="undeploy services from ${jee.server.cspace}">
		<ant antfile="services/build.xml" target="undeploy" inheritAll="false" />
		<ant antfile="3rdparty/build.xml" target="undeploy" inheritAll="false" />
		<delete failonerror="false" dir="${jee.server.cspace}/cspace/services" />
		<delete failonerror="false" dir="${jee.server.cspace}/cspace/config/services" />
		<!-- Delete mysql-ds.xml to clean up pre-1.8 bundles -->
		<delete failonerror="false" file="${jee.deploy.cspace}/mysql-ds.xml" />
		<delete failonerror="false" file="${jee.deploy.cspace}/jee-ds.xml" />
		<delete failonerror="false" file="${jee.deploy.cspace}/cspace-ds.xml" />
	</target>

	<target name="hotdeploy" depends="install" description="deploy services in running ${jee.server.cspace}">
		<ant antfile="services/build.xml" target="hotdeploy" inheritAll="false" />
	</target>

	<target name="eclipse" depends="eclipse-unix,eclipse-windows" description="Generate Eclipse files" />
	<target name="eclipse-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="eclipse:clean" />
			<arg value="eclipse:eclipse" />
			<arg value="${mvn.opts}" />
		</exec>
		<exec executable="fixeclipse" failonerror="true" />
	</target>
	<target name="eclipse-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="eclipse:clean" />
			<arg value="eclipse:eclipse" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

</project>
